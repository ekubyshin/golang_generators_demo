// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: authors.sql

package sqlc

import (
	"context"
)

const authorBooks = `-- name: AuthorBooks :many
select
    b.id,
    b.title,
    a.id,
    a.name
from
    authors_books ab
    join books b on ab.book_id = b.id
    join authors_books ab2 on ab2.book_id = b.id
    join authors a on ab2.author_id = a.id
where
    ab.author_id = $1
`

type AuthorBooksRow struct {
	ID    int32
	Title string
	ID_2  int32
	Name  string
}

func (q *Queries) AuthorBooks(ctx context.Context, authorID int32) ([]AuthorBooksRow, error) {
	rows, err := q.db.Query(ctx, authorBooks, authorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AuthorBooksRow
	for rows.Next() {
		var i AuthorBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ID_2,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const authorByID = `-- name: AuthorByID :one
select
    id, name
from
    authors
where
    id = $1
limit 1
`

func (q *Queries) AuthorByID(ctx context.Context, id int32) (Author, error) {
	row := q.db.QueryRow(ctx, authorByID, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const authorsList = `-- name: AuthorsList :many
select
    id, name
from
    authors
`

func (q *Queries) AuthorsList(ctx context.Context) ([]Author, error) {
	rows, err := q.db.Query(ctx, authorsList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createAuthor = `-- name: CreateAuthor :one
insert into authors(
    name)
values (
    $1)
returning
    id
`

func (q *Queries) CreateAuthor(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRow(ctx, createAuthor, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
delete from authors
where id = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const updateAuthor = `-- name: UpdateAuthor :exec
update
    authors
set
    name = $1
where
    id = $2
`

type UpdateAuthorParams struct {
	Name string
	ID   int32
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.Exec(ctx, updateAuthor, arg.Name, arg.ID)
	return err
}
