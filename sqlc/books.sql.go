// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: books.sql

package sqlc

import (
	"context"
)

const bookByID = `-- name: BookByID :one
select
    b.id,
    b.title,
    a.id,
    a.name
from
    books b
    join authors_books ab on ab.book_id = b.id
    join authors a on ab.author_id = a.id
where
    b.id = $1
limit 1
`

type BookByIDRow struct {
	ID    int32
	Title string
	ID_2  int32
	Name  string
}

func (q *Queries) BookByID(ctx context.Context, id int32) (BookByIDRow, error) {
	row := q.db.QueryRow(ctx, bookByID, id)
	var i BookByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.ID_2,
		&i.Name,
	)
	return i, err
}

const booksList = `-- name: BooksList :many
select
    b.id,
    b.title,
    a.id,
    a.name
from
    books b
    join authors_books ab on ab.book_id = b.id
    join authors a on ab.author_id = a.id
`

type BooksListRow struct {
	ID    int32
	Title string
	ID_2  int32
	Name  string
}

func (q *Queries) BooksList(ctx context.Context) ([]BooksListRow, error) {
	rows, err := q.db.Query(ctx, booksList)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BooksListRow
	for rows.Next() {
		var i BooksListRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.ID_2,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
